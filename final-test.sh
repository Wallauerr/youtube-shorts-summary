#!/bin/bash

# YouTube Shorts Summary - Final Test Script
# Este script testa todo o projeto para garantir que est√° funcionando corretamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Vari√°veis
SERVER_PID=""
API_BASE="http://localhost:3001/api"
FRONTEND_PORT=5173

echo -e "${BLUE}üöÄ =================================${NC}"
echo -e "${BLUE}üöÄ   TESTE FINAL DO PROJETO        ${NC}"
echo -e "${BLUE}üöÄ   YouTube Shorts Summary        ${NC}"
echo -e "${BLUE}üöÄ =================================${NC}"
echo ""

# Fun√ß√£o para limpar processos ao sair
cleanup() {
    echo -e "\n${YELLOW}üßπ Limpando processos...${NC}"
    if [ ! -z "$SERVER_PID" ]; then
        kill $SERVER_PID 2>/dev/null || true
    fi
    pkill -f "node.*index.js" 2>/dev/null || true
    pkill -f "vite" 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Limpeza conclu√≠da${NC}"
}

trap cleanup EXIT

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar depend√™ncias
echo -e "${BLUE}üìã Verificando depend√™ncias...${NC}"

if ! command_exists node; then
    echo -e "${RED}‚ùå Node.js n√£o encontrado${NC}"
    exit 1
fi

if ! command_exists npm; then
    echo -e "${RED}‚ùå npm n√£o encontrado${NC}"
    exit 1
fi

NODE_VERSION=$(node --version)
echo -e "${GREEN}‚úÖ Node.js: $NODE_VERSION${NC}"

# Verificar se as depend√™ncias est√£o instaladas
echo -e "\n${BLUE}üì¶ Verificando instala√ß√£o das depend√™ncias...${NC}"

if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Instalando depend√™ncias do frontend...${NC}"
    npm install
fi

if [ ! -d "server/node_modules" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Instalando depend√™ncias do servidor...${NC}"
    cd server && npm install && cd ..
fi

echo -e "${GREEN}‚úÖ Depend√™ncias verificadas${NC}"

# Teste 1: Build do Frontend
echo -e "\n${BLUE}üèóÔ∏è  Teste 1: Build do Frontend${NC}"
if npm run build > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Build do frontend OK${NC}"
    BUILD_TEST=1
else
    echo -e "${RED}‚ùå Build do frontend falhou${NC}"
    BUILD_TEST=0
fi

# Teste 2: Lint do c√≥digo
echo -e "\n${BLUE}üîç Teste 2: Lint do c√≥digo${NC}"
if npm run lint > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Lint passou${NC}"
    LINT_TEST=1
else
    echo -e "${RED}‚ùå Lint falhou${NC}"
    LINT_TEST=0
fi

# Teste 3: Iniciar servidor
echo -e "\n${BLUE}üñ•Ô∏è  Teste 3: Iniciando servidor...${NC}"
cd server
node index.js &
SERVER_PID=$!
cd ..

# Esperar servidor inicializar
sleep 5

# Verificar se servidor est√° rodando
if kill -0 $SERVER_PID 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Servidor iniciado (PID: $SERVER_PID)${NC}"
    SERVER_TEST=1
else
    echo -e "${RED}‚ùå Servidor falhou ao iniciar${NC}"
    SERVER_TEST=0
fi

# Teste 4: Health Check API
echo -e "\n${BLUE}üè• Teste 4: Health Check API${NC}"
if curl -s "$API_BASE/health" | grep -q "running"; then
    echo -e "${GREEN}‚úÖ Health Check OK${NC}"
    HEALTH_TEST=1
else
    echo -e "${RED}‚ùå Health Check falhou${NC}"
    HEALTH_TEST=0
fi

# Teste 5: API de Download (valida√ß√£o)
echo -e "\n${BLUE}üì• Teste 5: API de Download (valida√ß√£o)${NC}"
DOWNLOAD_RESPONSE=$(curl -s -w "%{http_code}" -X POST \
    -H "Content-Type: application/json" \
    -d '{"videoId":""}' \
    "$API_BASE/download")

if echo "$DOWNLOAD_RESPONSE" | grep -q "400"; then
    echo -e "${GREEN}‚úÖ Valida√ß√£o de Download OK${NC}"
    DOWNLOAD_TEST=1
else
    echo -e "${RED}‚ùå Valida√ß√£o de Download falhou${NC}"
    DOWNLOAD_TEST=0
fi

# Teste 6: API de Resumo
echo -e "\n${BLUE}üìù Teste 6: API de Resumo${NC}"
SUMMARY_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -d '{"text":"Este √© um teste do sistema de resumo. O sistema deve conseguir processar este texto e gerar um resumo conciso. √â importante que funcione corretamente para validar a funcionalidade."}' \
    "$API_BASE/summary")

if echo "$SUMMARY_RESPONSE" | grep -q "result"; then
    echo -e "${GREEN}‚úÖ API de Resumo OK${NC}"
    SUMMARY_TEST=1
else
    echo -e "${RED}‚ùå API de Resumo falhou${NC}"
    SUMMARY_TEST=0
fi

# Teste 7: Frontend Development Server
echo -e "\n${BLUE}üåê Teste 7: Frontend Development Server${NC}"
timeout 10s npm run dev > /dev/null 2>&1 &
VITE_PID=$!
sleep 5

if curl -s "http://localhost:$FRONTEND_PORT" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Frontend server OK${NC}"
    FRONTEND_TEST=1
else
    echo -e "${RED}‚ùå Frontend server falhou${NC}"
    FRONTEND_TEST=0
fi

kill $VITE_PID 2>/dev/null || true

# Resumo dos testes
echo -e "\n${BLUE}üöÄ =================================${NC}"
echo -e "${BLUE}üöÄ        RESUMO DOS TESTES        ${NC}"
echo -e "${BLUE}üöÄ =================================${NC}"

TOTAL_TESTS=7
PASSED_TESTS=0

echo -e "üìã Build Frontend:      $([ $BUILD_TEST -eq 1 ] && echo -e "${GREEN}‚úÖ PASSOU${NC}" || echo -e "${RED}‚ùå FALHOU${NC}")"
[ $BUILD_TEST -eq 1 ] && ((PASSED_TESTS++))

echo -e "üîç Lint:                $([ $LINT_TEST -eq 1 ] && echo -e "${GREEN}‚úÖ PASSOU${NC}" || echo -e "${RED}‚ùå FALHOU${NC}")"
[ $LINT_TEST -eq 1 ] && ((PASSED_TESTS++))

echo -e "üñ•Ô∏è  Servidor:            $([ $SERVER_TEST -eq 1 ] && echo -e "${GREEN}‚úÖ PASSOU${NC}" || echo -e "${RED}‚ùå FALHOU${NC}")"
[ $SERVER_TEST -eq 1 ] && ((PASSED_TESTS++))

echo -e "üè• Health Check:        $([ $HEALTH_TEST -eq 1 ] && echo -e "${GREEN}‚úÖ PASSOU${NC}" || echo -e "${RED}‚ùå FALHOU${NC}")"
[ $HEALTH_TEST -eq 1 ] && ((PASSED_TESTS++))

echo -e "üì• API Download:        $([ $DOWNLOAD_TEST -eq 1 ] && echo -e "${GREEN}‚úÖ PASSOU${NC}" || echo -e "${RED}‚ùå FALHOU${NC}")"
[ $DOWNLOAD_TEST -eq 1 ] && ((PASSED_TESTS++))

echo -e "üìù API Resumo:          $([ $SUMMARY_TEST -eq 1 ] && echo -e "${GREEN}‚úÖ PASSOU${NC}" || echo -e "${RED}‚ùå FALHOU${NC}")"
[ $SUMMARY_TEST -eq 1 ] && ((PASSED_TESTS++))

echo -e "üåê Frontend Server:     $([ $FRONTEND_TEST -eq 1 ] && echo -e "${GREEN}‚úÖ PASSOU${NC}" || echo -e "${RED}‚ùå FALHOU${NC}")"
[ $FRONTEND_TEST -eq 1 ] && ((PASSED_TESTS++))

echo ""
echo -e "${BLUE}üìä RESULTADO FINAL:${NC}"
echo -e "   Testes aprovados: ${GREEN}$PASSED_TESTS/$TOTAL_TESTS${NC}"

if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
    echo -e "\n${GREEN}üéâ TODOS OS TESTES PASSARAM!${NC}"
    echo -e "${GREEN}üöÄ O projeto est√° funcionando corretamente!${NC}"
    echo ""
    echo -e "${YELLOW}üìù Para usar o projeto:${NC}"
    echo -e "   1. ${BLUE}cd server && npm start${NC}     (Terminal 1)"
    echo -e "   2. ${BLUE}npm run dev${NC}               (Terminal 2)"
    echo -e "   3. Acesse ${BLUE}http://localhost:5173${NC}"
    echo ""
    exit 0
else
    echo -e "\n${RED}‚ö†Ô∏è  ALGUNS TESTES FALHARAM${NC}"
    echo -e "${YELLOW}üìã Verifique os erros acima e corrija os problemas${NC}"
    echo ""
    exit 1
fi
